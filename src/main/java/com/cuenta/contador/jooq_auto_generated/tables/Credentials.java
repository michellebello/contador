/*
 * This file is generated by jOOQ.
 */
package com.cuenta.contador.jooq_auto_generated.tables;


import com.cuenta.contador.jooq_auto_generated.Contadordb;
import com.cuenta.contador.jooq_auto_generated.Keys;
import com.cuenta.contador.jooq_auto_generated.tables.Account.AccountPath;
import com.cuenta.contador.jooq_auto_generated.tables.Session.SessionPath;
import com.cuenta.contador.jooq_auto_generated.tables.Transaction.TransactionPath;
import com.cuenta.contador.jooq_auto_generated.tables.User.UserPath;
import com.cuenta.contador.jooq_auto_generated.tables.records.CredentialsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Credentials extends TableImpl<CredentialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>contadordb.credentials</code>
     */
    public static final Credentials CREDENTIALS = new Credentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CredentialsRecord> getRecordType() {
        return CredentialsRecord.class;
    }

    /**
     * The column <code>contadordb.credentials.id</code>.
     */
    public final TableField<CredentialsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>contadordb.credentials.username</code>.
     */
    public final TableField<CredentialsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>contadordb.credentials.password</code>.
     */
    public final TableField<CredentialsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private Credentials(Name alias, Table<CredentialsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Credentials(Name alias, Table<CredentialsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>contadordb.credentials</code> table reference
     */
    public Credentials(String alias) {
        this(DSL.name(alias), CREDENTIALS);
    }

    /**
     * Create an aliased <code>contadordb.credentials</code> table reference
     */
    public Credentials(Name alias) {
        this(alias, CREDENTIALS);
    }

    /**
     * Create a <code>contadordb.credentials</code> table reference
     */
    public Credentials() {
        this(DSL.name("credentials"), null);
    }

    public <O extends Record> Credentials(Table<O> path, ForeignKey<O, CredentialsRecord> childPath, InverseForeignKey<O, CredentialsRecord> parentPath) {
        super(path, childPath, parentPath, CREDENTIALS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CredentialsPath extends Credentials implements Path<CredentialsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CredentialsPath(Table<O> path, ForeignKey<O, CredentialsRecord> childPath, InverseForeignKey<O, CredentialsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CredentialsPath(Name alias, Table<CredentialsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CredentialsPath as(String alias) {
            return new CredentialsPath(DSL.name(alias), this);
        }

        @Override
        public CredentialsPath as(Name alias) {
            return new CredentialsPath(alias, this);
        }

        @Override
        public CredentialsPath as(Table<?> alias) {
            return new CredentialsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Contadordb.CONTADORDB;
    }

    @Override
    public Identity<CredentialsRecord, Integer> getIdentity() {
        return (Identity<CredentialsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CredentialsRecord> getPrimaryKey() {
        return Keys.KEY_CREDENTIALS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CredentialsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CREDENTIALS_USERNAME);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit to-many join path to the <code>contadordb.account</code>
     * table
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, null, Keys.ACCOUNT_IBFK_1.getInverseKey());

        return _account;
    }

    private transient SessionPath _session;

    /**
     * Get the implicit to-many join path to the <code>contadordb.session</code>
     * table
     */
    public SessionPath session() {
        if (_session == null)
            _session = new SessionPath(this, null, Keys.SESSION_IBFK_1.getInverseKey());

        return _session;
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit to-many join path to the
     * <code>contadordb.transaction</code> table
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, null, Keys.TRANSACTION_IBFK_1.getInverseKey());

        return _transaction;
    }

    private transient UserPath _user;

    /**
     * Get the implicit to-many join path to the <code>contadordb.user</code>
     * table
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, null, Keys.USER_IBFK_1.getInverseKey());

        return _user;
    }

    @Override
    public Credentials as(String alias) {
        return new Credentials(DSL.name(alias), this);
    }

    @Override
    public Credentials as(Name alias) {
        return new Credentials(alias, this);
    }

    @Override
    public Credentials as(Table<?> alias) {
        return new Credentials(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials rename(String name) {
        return new Credentials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials rename(Name name) {
        return new Credentials(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials rename(Table<?> name) {
        return new Credentials(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials where(Condition condition) {
        return new Credentials(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Credentials where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Credentials where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Credentials where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Credentials where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Credentials whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
